// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/cloudfoundry-incubator/garden-linux/old/linux_backend"
)

type FakeContainerRepository struct {
	AllStub        func() []linux_backend.Container
	allMutex       sync.RWMutex
	allArgsForCall []struct{}
	allReturns struct {
		result1 []linux_backend.Container
	}
	AddStub        func(linux_backend.Container)
	addMutex       sync.RWMutex
	addArgsForCall []struct {
		arg1 linux_backend.Container
	}
	FindByHandleStub        func(string) (linux_backend.Container, bool)
	findByHandleMutex       sync.RWMutex
	findByHandleArgsForCall []struct {
		arg1 string
	}
	findByHandleReturns struct {
		result1 linux_backend.Container
		result2 bool
	}
	DeleteStub        func(linux_backend.Container)
	deleteMutex       sync.RWMutex
	deleteArgsForCall []struct {
		arg1 linux_backend.Container
	}
}

func (fake *FakeContainerRepository) All() []linux_backend.Container {
	fake.allMutex.Lock()
	fake.allArgsForCall = append(fake.allArgsForCall, struct{}{})
	fake.allMutex.Unlock()
	if fake.AllStub != nil {
		return fake.AllStub()
	} else {
		return fake.allReturns.result1
	}
}

func (fake *FakeContainerRepository) AllCallCount() int {
	fake.allMutex.RLock()
	defer fake.allMutex.RUnlock()
	return len(fake.allArgsForCall)
}

func (fake *FakeContainerRepository) AllReturns(result1 []linux_backend.Container) {
	fake.AllStub = nil
	fake.allReturns = struct {
		result1 []linux_backend.Container
	}{result1}
}

func (fake *FakeContainerRepository) Add(arg1 linux_backend.Container) {
	fake.addMutex.Lock()
	fake.addArgsForCall = append(fake.addArgsForCall, struct {
		arg1 linux_backend.Container
	}{arg1})
	fake.addMutex.Unlock()
	if fake.AddStub != nil {
		fake.AddStub(arg1)
	}
}

func (fake *FakeContainerRepository) AddCallCount() int {
	fake.addMutex.RLock()
	defer fake.addMutex.RUnlock()
	return len(fake.addArgsForCall)
}

func (fake *FakeContainerRepository) AddArgsForCall(i int) linux_backend.Container {
	fake.addMutex.RLock()
	defer fake.addMutex.RUnlock()
	return fake.addArgsForCall[i].arg1
}

func (fake *FakeContainerRepository) FindByHandle(arg1 string) (linux_backend.Container, bool) {
	fake.findByHandleMutex.Lock()
	fake.findByHandleArgsForCall = append(fake.findByHandleArgsForCall, struct {
		arg1 string
	}{arg1})
	fake.findByHandleMutex.Unlock()
	if fake.FindByHandleStub != nil {
		return fake.FindByHandleStub(arg1)
	} else {
		return fake.findByHandleReturns.result1, fake.findByHandleReturns.result2
	}
}

func (fake *FakeContainerRepository) FindByHandleCallCount() int {
	fake.findByHandleMutex.RLock()
	defer fake.findByHandleMutex.RUnlock()
	return len(fake.findByHandleArgsForCall)
}

func (fake *FakeContainerRepository) FindByHandleArgsForCall(i int) string {
	fake.findByHandleMutex.RLock()
	defer fake.findByHandleMutex.RUnlock()
	return fake.findByHandleArgsForCall[i].arg1
}

func (fake *FakeContainerRepository) FindByHandleReturns(result1 linux_backend.Container, result2 bool) {
	fake.FindByHandleStub = nil
	fake.findByHandleReturns = struct {
		result1 linux_backend.Container
		result2 bool
	}{result1, result2}
}

func (fake *FakeContainerRepository) Delete(arg1 linux_backend.Container) {
	fake.deleteMutex.Lock()
	fake.deleteArgsForCall = append(fake.deleteArgsForCall, struct {
		arg1 linux_backend.Container
	}{arg1})
	fake.deleteMutex.Unlock()
	if fake.DeleteStub != nil {
		fake.DeleteStub(arg1)
	}
}

func (fake *FakeContainerRepository) DeleteCallCount() int {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return len(fake.deleteArgsForCall)
}

func (fake *FakeContainerRepository) DeleteArgsForCall(i int) linux_backend.Container {
	fake.deleteMutex.RLock()
	defer fake.deleteMutex.RUnlock()
	return fake.deleteArgsForCall[i].arg1
}

var _ linux_backend.ContainerRepository = new(FakeContainerRepository)

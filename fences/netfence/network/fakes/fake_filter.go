// This file was generated by counterfeiter
package fakes

import (
	"sync"

	"github.com/cloudfoundry-incubator/garden-linux/fences/netfence/network"
	"github.com/cloudfoundry-incubator/garden/api"
)

type FakeFilter struct {
	NetOutStub        func(network string, port uint32, protocol api.Protocol) error
	netOutMutex       sync.RWMutex
	netOutArgsForCall []struct {
		network  string
		port     uint32
		protocol api.Protocol
	}
	netOutReturns struct {
		result1 error
	}
}

func (fake *FakeFilter) NetOut(network string, port uint32, protocol api.Protocol) error {
	fake.netOutMutex.Lock()
	fake.netOutArgsForCall = append(fake.netOutArgsForCall, struct {
		network  string
		port     uint32
		protocol api.Protocol
	}{network, port, protocol})
	fake.netOutMutex.Unlock()
	if fake.NetOutStub != nil {
		return fake.NetOutStub(network, port, protocol)
	} else {
		return fake.netOutReturns.result1
	}
}

func (fake *FakeFilter) NetOutCallCount() int {
	fake.netOutMutex.RLock()
	defer fake.netOutMutex.RUnlock()
	return len(fake.netOutArgsForCall)
}

func (fake *FakeFilter) NetOutArgsForCall(i int) (string, uint32, api.Protocol) {
	fake.netOutMutex.RLock()
	defer fake.netOutMutex.RUnlock()
	return fake.netOutArgsForCall[i].network, fake.netOutArgsForCall[i].port, fake.netOutArgsForCall[i].protocol
}

func (fake *FakeFilter) NetOutReturns(result1 error) {
	fake.NetOutStub = nil
	fake.netOutReturns = struct {
		result1 error
	}{result1}
}

var _ network.Filter = new(FakeFilter)

// This file was generated by counterfeiter
package fake_process_tracker

import (
	"github.com/cloudfoundry-incubator/warden-linux/linux_backend/process_tracker"

	"sync"
)

type FakeLinuxProcess struct {
	IDStub        func() uint32
	iDMutex       sync.RWMutex
	iDArgsForCall []struct{}
	iDReturns struct {
		result1 uint32
	}
	WaitStub        func() (int, error)
	waitMutex       sync.RWMutex
	waitArgsForCall []struct{}
	waitReturns struct {
		result1 int
		result2 error
	}
	SetWindowSizeStub        func(cols, rows int) error
	setWindowSizeMutex       sync.RWMutex
	setWindowSizeArgsForCall []struct {
		cols int
		rows int
	}
	setWindowSizeReturns struct {
		result1 error
	}
	WithTTYStub        func() bool
	withTTYMutex       sync.RWMutex
	withTTYArgsForCall []struct{}
	withTTYReturns struct {
		result1 bool
	}
}

func (fake *FakeLinuxProcess) ID() uint32 {
	fake.iDMutex.Lock()
	defer fake.iDMutex.Unlock()
	fake.iDArgsForCall = append(fake.iDArgsForCall, struct{}{})
	if fake.IDStub != nil {
		return fake.IDStub()
	} else {
		return fake.iDReturns.result1
	}
}

func (fake *FakeLinuxProcess) IDCallCount() int {
	fake.iDMutex.RLock()
	defer fake.iDMutex.RUnlock()
	return len(fake.iDArgsForCall)
}

func (fake *FakeLinuxProcess) IDReturns(result1 uint32) {
	fake.iDReturns = struct {
		result1 uint32
	}{result1}
}

func (fake *FakeLinuxProcess) Wait() (int, error) {
	fake.waitMutex.Lock()
	defer fake.waitMutex.Unlock()
	fake.waitArgsForCall = append(fake.waitArgsForCall, struct{}{})
	if fake.WaitStub != nil {
		return fake.WaitStub()
	} else {
		return fake.waitReturns.result1, fake.waitReturns.result2
	}
}

func (fake *FakeLinuxProcess) WaitCallCount() int {
	fake.waitMutex.RLock()
	defer fake.waitMutex.RUnlock()
	return len(fake.waitArgsForCall)
}

func (fake *FakeLinuxProcess) WaitReturns(result1 int, result2 error) {
	fake.waitReturns = struct {
		result1 int
		result2 error
	}{result1, result2}
}

func (fake *FakeLinuxProcess) SetWindowSize(cols int, rows int) error {
	fake.setWindowSizeMutex.Lock()
	defer fake.setWindowSizeMutex.Unlock()
	fake.setWindowSizeArgsForCall = append(fake.setWindowSizeArgsForCall, struct {
		cols int
		rows int
	}{cols, rows})
	if fake.SetWindowSizeStub != nil {
		return fake.SetWindowSizeStub(cols, rows)
	} else {
		return fake.setWindowSizeReturns.result1
	}
}

func (fake *FakeLinuxProcess) SetWindowSizeCallCount() int {
	fake.setWindowSizeMutex.RLock()
	defer fake.setWindowSizeMutex.RUnlock()
	return len(fake.setWindowSizeArgsForCall)
}

func (fake *FakeLinuxProcess) SetWindowSizeArgsForCall(i int) (int, int) {
	fake.setWindowSizeMutex.RLock()
	defer fake.setWindowSizeMutex.RUnlock()
	return fake.setWindowSizeArgsForCall[i].cols, fake.setWindowSizeArgsForCall[i].rows
}

func (fake *FakeLinuxProcess) SetWindowSizeReturns(result1 error) {
	fake.setWindowSizeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeLinuxProcess) WithTTY() bool {
	fake.withTTYMutex.Lock()
	defer fake.withTTYMutex.Unlock()
	fake.withTTYArgsForCall = append(fake.withTTYArgsForCall, struct{}{})
	if fake.WithTTYStub != nil {
		return fake.WithTTYStub()
	} else {
		return fake.withTTYReturns.result1
	}
}

func (fake *FakeLinuxProcess) WithTTYCallCount() int {
	fake.withTTYMutex.RLock()
	defer fake.withTTYMutex.RUnlock()
	return len(fake.withTTYArgsForCall)
}

func (fake *FakeLinuxProcess) WithTTYReturns(result1 bool) {
	fake.withTTYReturns = struct {
		result1 bool
	}{result1}
}

var _ process_tracker.LinuxProcess = new(FakeLinuxProcess)
